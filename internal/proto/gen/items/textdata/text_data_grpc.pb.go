// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: internal/proto/items/text_data.proto

package textdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Service_CreateTextData_FullMethodName    = "/items.textdata.Service/CreateTextData"
	Service_GetTextData_FullMethodName       = "/items.textdata.Service/GetTextData"
	Service_ListTextDataItems_FullMethodName = "/items.textdata.Service/ListTextDataItems"
	Service_UpdateTextData_FullMethodName    = "/items.textdata.Service/UpdateTextData"
	Service_DeleteTextData_FullMethodName    = "/items.textdata.Service/DeleteTextData"
)

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	// Создание новых текстовых данных
	CreateTextData(ctx context.Context, in *CreateTextDataRequest, opts ...grpc.CallOption) (*TextDataItem, error)
	// Получение данных по ID
	GetTextData(ctx context.Context, in *GetTextDataRequest, opts ...grpc.CallOption) (*TextDataItem, error)
	// Получение списка всех паролей пользователя
	ListTextDataItems(ctx context.Context, in *ListTextDataRequest, opts ...grpc.CallOption) (*ListTextDataResponse, error)
	// Обновление данных
	UpdateTextData(ctx context.Context, in *UpdateTextDataRequest, opts ...grpc.CallOption) (*TextDataItem, error)
	// Удаление данных
	DeleteTextData(ctx context.Context, in *DeleteTextDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CreateTextData(ctx context.Context, in *CreateTextDataRequest, opts ...grpc.CallOption) (*TextDataItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextDataItem)
	err := c.cc.Invoke(ctx, Service_CreateTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetTextData(ctx context.Context, in *GetTextDataRequest, opts ...grpc.CallOption) (*TextDataItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextDataItem)
	err := c.cc.Invoke(ctx, Service_GetTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListTextDataItems(ctx context.Context, in *ListTextDataRequest, opts ...grpc.CallOption) (*ListTextDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTextDataResponse)
	err := c.cc.Invoke(ctx, Service_ListTextDataItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateTextData(ctx context.Context, in *UpdateTextDataRequest, opts ...grpc.CallOption) (*TextDataItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextDataItem)
	err := c.cc.Invoke(ctx, Service_UpdateTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteTextData(ctx context.Context, in *DeleteTextDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Service_DeleteTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility.
type ServiceServer interface {
	// Создание новых текстовых данных
	CreateTextData(context.Context, *CreateTextDataRequest) (*TextDataItem, error)
	// Получение данных по ID
	GetTextData(context.Context, *GetTextDataRequest) (*TextDataItem, error)
	// Получение списка всех паролей пользователя
	ListTextDataItems(context.Context, *ListTextDataRequest) (*ListTextDataResponse, error)
	// Обновление данных
	UpdateTextData(context.Context, *UpdateTextDataRequest) (*TextDataItem, error)
	// Удаление данных
	DeleteTextData(context.Context, *DeleteTextDataRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceServer struct{}

func (UnimplementedServiceServer) CreateTextData(context.Context, *CreateTextDataRequest) (*TextDataItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTextData not implemented")
}
func (UnimplementedServiceServer) GetTextData(context.Context, *GetTextDataRequest) (*TextDataItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTextData not implemented")
}
func (UnimplementedServiceServer) ListTextDataItems(context.Context, *ListTextDataRequest) (*ListTextDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTextDataItems not implemented")
}
func (UnimplementedServiceServer) UpdateTextData(context.Context, *UpdateTextDataRequest) (*TextDataItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTextData not implemented")
}
func (UnimplementedServiceServer) DeleteTextData(context.Context, *DeleteTextDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTextData not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}
func (UnimplementedServiceServer) testEmbeddedByValue()                 {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	// If the following call pancis, it indicates UnimplementedServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CreateTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_CreateTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateTextData(ctx, req.(*CreateTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_GetTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetTextData(ctx, req.(*GetTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListTextDataItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListTextDataItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_ListTextDataItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListTextDataItems(ctx, req.(*ListTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_UpdateTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateTextData(ctx, req.(*UpdateTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Service_DeleteTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteTextData(ctx, req.(*DeleteTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "items.textdata.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTextData",
			Handler:    _Service_CreateTextData_Handler,
		},
		{
			MethodName: "GetTextData",
			Handler:    _Service_GetTextData_Handler,
		},
		{
			MethodName: "ListTextDataItems",
			Handler:    _Service_ListTextDataItems_Handler,
		},
		{
			MethodName: "UpdateTextData",
			Handler:    _Service_UpdateTextData_Handler,
		},
		{
			MethodName: "DeleteTextData",
			Handler:    _Service_DeleteTextData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/items/text_data.proto",
}
