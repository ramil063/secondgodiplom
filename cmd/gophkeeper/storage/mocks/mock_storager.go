// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ramil063/secondgodiplom/cmd/gophkeeper/storage (interfaces: Storager)

// Package storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/ramil063/secondgodiplom/internal/storage/db/dml/repository"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// GetRepository mocks base method.
func (m *MockStorager) GetRepository() repository.Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository")
	ret0, _ := ret[0].(repository.Repository)
	return ret0
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockStoragerMockRecorder) GetRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockStorager)(nil).GetRepository))
}

// SetRepository mocks base method.
func (m *MockStorager) SetRepository(arg0 *repository.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRepository", arg0)
}

// SetRepository indicates an expected call of SetRepository.
func (mr *MockStoragerMockRecorder) SetRepository(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepository", reflect.TypeOf((*MockStorager)(nil).SetRepository), arg0)
}
