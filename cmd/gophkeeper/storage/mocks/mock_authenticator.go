// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ramil063/secondgodiplom/cmd/gophkeeper/storage (interfaces: Authenticator)

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	auth "github.com/ramil063/secondgodiplom/cmd/gophkeeper/storage/models/auth"
	user "github.com/ramil063/secondgodiplom/cmd/gophkeeper/storage/models/user"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// GetRefreshToken mocks base method.
func (m *MockAuthenticator) GetRefreshToken(arg0 context.Context, arg1 string) (*auth.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*auth.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockAuthenticatorMockRecorder) GetRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockAuthenticator)(nil).GetRefreshToken), arg0, arg1)
}

// GetUserByLogin mocks base method.
func (m *MockAuthenticator) GetUserByLogin(arg0 context.Context, arg1 string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockAuthenticatorMockRecorder) GetUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockAuthenticator)(nil).GetUserByLogin), arg0, arg1)
}

// RevokeRefreshToken mocks base method.
func (m *MockAuthenticator) RevokeRefreshToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRefreshToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeRefreshToken indicates an expected call of RevokeRefreshToken.
func (mr *MockAuthenticatorMockRecorder) RevokeRefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRefreshToken", reflect.TypeOf((*MockAuthenticator)(nil).RevokeRefreshToken), arg0, arg1)
}

// SaveAccessToken mocks base method.
func (m *MockAuthenticator) SaveAccessToken(arg0 context.Context, arg1 int, arg2 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccessToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAccessToken indicates an expected call of SaveAccessToken.
func (mr *MockAuthenticatorMockRecorder) SaveAccessToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccessToken", reflect.TypeOf((*MockAuthenticator)(nil).SaveAccessToken), arg0, arg1, arg2)
}

// SaveRefreshToken mocks base method.
func (m *MockAuthenticator) SaveRefreshToken(arg0 context.Context, arg1 int, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRefreshToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRefreshToken indicates an expected call of SaveRefreshToken.
func (mr *MockAuthenticatorMockRecorder) SaveRefreshToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRefreshToken", reflect.TypeOf((*MockAuthenticator)(nil).SaveRefreshToken), arg0, arg1, arg2)
}
