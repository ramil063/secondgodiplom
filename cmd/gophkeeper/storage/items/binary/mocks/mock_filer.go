// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ramil063/secondgodiplom/cmd/gophkeeper/storage/items/binary (interfaces: Filer)

// Package binary is a generated GoMock package.
package binary

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	items "github.com/ramil063/secondgodiplom/cmd/gophkeeper/storage/models/items"
	binarydata "github.com/ramil063/secondgodiplom/internal/proto/gen/items/binarydata"
)

// MockFiler is a mock of Filer interface.
type MockFiler struct {
	ctrl     *gomock.Controller
	recorder *MockFilerMockRecorder
}

// MockFilerMockRecorder is the mock recorder for MockFiler.
type MockFilerMockRecorder struct {
	mock *MockFiler
}

// NewMockFiler creates a new mock instance.
func NewMockFiler(ctrl *gomock.Controller) *MockFiler {
	mock := &MockFiler{ctrl: ctrl}
	mock.recorder = &MockFilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFiler) EXPECT() *MockFilerMockRecorder {
	return m.recorder
}

// CreateFileRecord mocks base method.
func (m *MockFiler) CreateFileRecord(arg0 context.Context, arg1 int, arg2 *binarydata.FileMetadata) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileRecord indicates an expected call of CreateFileRecord.
func (mr *MockFilerMockRecorder) CreateFileRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileRecord", reflect.TypeOf((*MockFiler)(nil).CreateFileRecord), arg0, arg1, arg2)
}

// DeleteFile mocks base method.
func (m *MockFiler) DeleteFile(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFilerMockRecorder) DeleteFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFiler)(nil).DeleteFile), arg0, arg1, arg2)
}

// GetChunksInRange mocks base method.
func (m *MockFiler) GetChunksInRange(arg0 context.Context, arg1 int64, arg2, arg3 int32) ([]*items.ChunkData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChunksInRange", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*items.ChunkData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChunksInRange indicates an expected call of GetChunksInRange.
func (mr *MockFilerMockRecorder) GetChunksInRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChunksInRange", reflect.TypeOf((*MockFiler)(nil).GetChunksInRange), arg0, arg1, arg2, arg3)
}

// GetFileInfo mocks base method.
func (m *MockFiler) GetFileInfo(arg0 context.Context, arg1, arg2 int64) (*items.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*items.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo.
func (mr *MockFilerMockRecorder) GetFileInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockFiler)(nil).GetFileInfo), arg0, arg1, arg2)
}

// GetListFiles mocks base method.
func (m *MockFiler) GetListFiles(arg0 context.Context, arg1 int64, arg2, arg3 int32, arg4 string) ([]*items.FileInfo, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListFiles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*items.FileInfo)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListFiles indicates an expected call of GetListFiles.
func (mr *MockFilerMockRecorder) GetListFiles(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListFiles", reflect.TypeOf((*MockFiler)(nil).GetListFiles), arg0, arg1, arg2, arg3, arg4)
}

// GetTotalCount mocks base method.
func (m *MockFiler) GetTotalCount(arg0 context.Context, arg1 string, arg2 int64, arg3 string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalCount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalCount indicates an expected call of GetTotalCount.
func (mr *MockFilerMockRecorder) GetTotalCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalCount", reflect.TypeOf((*MockFiler)(nil).GetTotalCount), arg0, arg1, arg2, arg3)
}

// MarkFileComplete mocks base method.
func (m *MockFiler) MarkFileComplete(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkFileComplete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkFileComplete indicates an expected call of MarkFileComplete.
func (mr *MockFilerMockRecorder) MarkFileComplete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkFileComplete", reflect.TypeOf((*MockFiler)(nil).MarkFileComplete), arg0, arg1, arg2)
}

// SaveChunk mocks base method.
func (m *MockFiler) SaveChunk(arg0 context.Context, arg1 int64, arg2 int32, arg3 []byte, arg4 string, arg5 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveChunk", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveChunk indicates an expected call of SaveChunk.
func (mr *MockFilerMockRecorder) SaveChunk(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveChunk", reflect.TypeOf((*MockFiler)(nil).SaveChunk), arg0, arg1, arg2, arg3, arg4, arg5)
}
