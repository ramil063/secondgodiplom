// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ramil063/secondgodiplom/cmd/gophkeeper/storage/items (interfaces: Itemer)

// Package items is a generated GoMock package.
package items

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	items "github.com/ramil063/secondgodiplom/cmd/gophkeeper/storage/models/items"
)

// MockItemer is a mock of Itemer interface.
type MockItemer struct {
	ctrl     *gomock.Controller
	recorder *MockItemerMockRecorder
}

// MockItemerMockRecorder is the mock recorder for MockItemer.
type MockItemerMockRecorder struct {
	mock *MockItemer
}

// NewMockItemer creates a new mock instance.
func NewMockItemer(ctrl *gomock.Controller) *MockItemer {
	mock := &MockItemer{ctrl: ctrl}
	mock.recorder = &MockItemerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemer) EXPECT() *MockItemerMockRecorder {
	return m.recorder
}

// DeleteItem mocks base method.
func (m *MockItemer) DeleteItem(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemerMockRecorder) DeleteItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemer)(nil).DeleteItem), arg0, arg1)
}

// GetItem mocks base method.
func (m *MockItemer) GetItem(arg0 context.Context, arg1 int64) (*items.ItemData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0, arg1)
	ret0, _ := ret[0].(*items.ItemData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemerMockRecorder) GetItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemer)(nil).GetItem), arg0, arg1)
}

// GetListItems mocks base method.
func (m *MockItemer) GetListItems(arg0 context.Context, arg1 int64, arg2, arg3 int32, arg4, arg5 string) ([]*items.ItemData, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListItems", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*items.ItemData)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetListItems indicates an expected call of GetListItems.
func (mr *MockItemerMockRecorder) GetListItems(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListItems", reflect.TypeOf((*MockItemer)(nil).GetListItems), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetMetaDataList mocks base method.
func (m *MockItemer) GetMetaDataList(arg0 context.Context, arg1 int64) ([]*items.MetaData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaDataList", arg0, arg1)
	ret0, _ := ret[0].([]*items.MetaData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetaDataList indicates an expected call of GetMetaDataList.
func (mr *MockItemerMockRecorder) GetMetaDataList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaDataList", reflect.TypeOf((*MockItemer)(nil).GetMetaDataList), arg0, arg1)
}

// SaveEncryptedData mocks base method.
func (m *MockItemer) SaveEncryptedData(arg0 context.Context, arg1 *items.EncryptedItem) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEncryptedData", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveEncryptedData indicates an expected call of SaveEncryptedData.
func (mr *MockItemerMockRecorder) SaveEncryptedData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEncryptedData", reflect.TypeOf((*MockItemer)(nil).SaveEncryptedData), arg0, arg1)
}

// SaveMetadata mocks base method.
func (m *MockItemer) SaveMetadata(arg0 context.Context, arg1 *items.MetaData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMetadata indicates an expected call of SaveMetadata.
func (mr *MockItemerMockRecorder) SaveMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMetadata", reflect.TypeOf((*MockItemer)(nil).SaveMetadata), arg0, arg1)
}

// UpdateItem mocks base method.
func (m *MockItemer) UpdateItem(arg0 context.Context, arg1 int64, arg2 *items.EncryptedItem) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemerMockRecorder) UpdateItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemer)(nil).UpdateItem), arg0, arg1, arg2)
}
